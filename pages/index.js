import Head from "next/head";
import React, { useState } from "react";
import { useQuery, gql } from "@apollo/client";
import { useMoralis, useWeb3Contract } from "react-moralis";
import styles from "../styles/index.module.css";
import { Table, Form, useNotification } from "@web3uikit/core";
import Web3NotEnabled from "../components/Web3NotEnabled";
import electionAbi from "../constants/Election.json";
import networkMapping from "../constants/networkMapping.json";

const GET_ACTIVE_CANDIDATES = gql`
    {
        activeCandidates {
            id
            candidateId
            candidateName
            votes
        }
    }
`;

export default function Home() {
    const { chainId, isWeb3Enabled } = useMoralis();

    const chainString = chainId ? parseInt(chainId).toString() : "31337";
    const electionAddress = networkMapping[chainString].Election[0];

    const { loading, error, data } = useQuery(GET_ACTIVE_CANDIDATES);
    const { runContractFunction } = useWeb3Contract();
    const dispatch = useNotification();

    const [voteFormKey, setVoteFormKey] = useState(0);

    async function vote(data) {
        const candidateId = data.data[0].inputResult;

        const voteOptions = {
            abi: electionAbi,
            contractAddress: electionAddress,
            functionName: "vote",
            params: { candidateId: candidateId },
        };

        await runContractFunction({
            params: voteOptions,
            onSuccess: () => handleVoteSuccess(),
            onError: (error) => handleVoteFailure(error),
        });
        setVoteFormKey(voteFormKey + 1);
    }

    async function handleVoteSuccess() {
        dispatch({
            type: "success",
            message: "Voted successfully!",
            title: "Voted successfully!",
            position: "topR",
        });
    }

    async function handleVoteFailure(error) {
        console.log(error);
        dispatch({
            type: "error",
            message: "Voting failed",
            title: "Failed!",
            position: "topR",
        });
    }

    return (
        <div>
            <Head>
                <title>Election DApp</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className={styles.container}>
                {isWeb3Enabled ? (
                    loading || !data ? (
                        <Table
                            columnsConfig="80px 2fr 2fr 2fr 80px"
                            data={[]}
                            header={[
                                "",
                                <span>Candidate ID</span>,
                                <span>Name</span>,
                                <span>Votes</span>,
                                "",
                            ]}
                            isLoading
                        />
                    ) : (
                        <>
                            <Table
                                columnsConfig="0px 2fr 2fr 2fr 0px"
                                customNoDataText="There are no candidates to vote"
                                data={data.activeCandidates.map((activeCandidate) => {
                                    const { candidateId, candidateName, votes } = activeCandidate;
                                    return [
                                        <div></div>,
                                        <div>{candidateId}</div>,
                                        <div>{candidateName}</div>,
                                        <div>{votes}</div>,
                                        <div></div>,
                                    ];
                                })}
                                header={[
                                    "",
                                    <span>Candidate ID</span>,
                                    <span>Name</span>,
                                    <span>Votes</span>,
                                    "",
                                ]}
                                noPagination
                            />
                            <Form
                                key={voteFormKey}
                                buttonConfig={{
                                    text: "Vote",
                                    theme: "primary",
                                }}
                                data={[
                                    {
                                        name: "Choose ID",
                                        type: "number",
                                        validation: {
                                            numberMin: 0,
                                        },
                                        key: "candidateId",
                                    },
                                ]}
                                onSubmit={vote}
                                title="Vote for candidate"
                            />
                        </>
                    )
                ) : (
                    <Web3NotEnabled></Web3NotEnabled>
                )}
            </div>
        </div>
    );
}

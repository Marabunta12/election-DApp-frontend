import Head from "next/head";
import { useQuery, gql } from "@apollo/client";
import { useMoralis, useWeb3Contract } from "react-moralis";
import styles from "../styles/index.module.css";
import { Table, Form, useNotification } from "@web3uikit/core";
import electionAbi from "../constants/Election.json";
import networkMapping from "../constants/networkMapping.json";

const GET_ACTIVE_CANDIDATES = gql`
    {
        activeCandidates {
            id
            candidateId
            votes
        }
    }
`;

export default function Home() {
    const { chainId, isWeb3Enabled } = useMoralis();

    const chainString = chainId ? parseInt(chainId).toString() : "31337";
    const electionAddress = networkMapping[chainString].Election[0];

    const { loading, error, data } = useQuery(GET_ACTIVE_CANDIDATES);
    const { runContractFunction } = useWeb3Contract();
    const dispatch = useNotification();

    async function vote(data) {
        const candidateId = data.data[0].inputResult;

        const voteOptions = {
            abi: electionAbi,
            contractAddress: electionAddress,
            functionName: "vote",
            params: candidateId,
        };
        await runContractFunction({
            params: voteOptions,
            onSuccess: () => handleVoteSuccess(),
            onError: (error) => handleVoteFailure(error),
        });
    }

    async function handleVoteSuccess() {
        dispatch({
            type: "success",
            message: "Voted successfully!",
            title: "Voted successfully!",
            position: "topR",
        });
    }

    async function handleVoteFailure(error) {
        dispatch({
            type: "error",
            message: error,
            title: error,
            position: "topR",
        });
    }

    return (
        <div>
            <Head>
                <title>Election DApp</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className={styles.mainContent}>
                {isWeb3Enabled ? (
                    loading || !data ? (
                        <Table
                            columnsConfig="80px 2fr 2fr 2fr 80px"
                            data={[]}
                            header={[
                                "",
                                <span>Candidate ID</span>,
                                <span>Name</span>,
                                <span>Votes</span>,
                                "",
                            ]}
                            isLoading
                        />
                    ) : (
                        data.activeCandidates.map((activeCandidate) => {
                            //console.log(activeCandidate); // delete later
                            const { candidateId, votes } = activeCandidate;
                            return (
                                <Table
                                    columnsConfig="0px 2fr 2fr 2fr 0px"
                                    customNoDataText="There are no candidates to vote"
                                    data={[
                                        [
                                            <div></div>,
                                            <div>{candidateId}</div>,
                                            <div>Placeholder Name</div>,
                                            <div>{votes}</div>,
                                            <div></div>,
                                        ],
                                    ]}
                                    header={[
                                        "",
                                        <span>Candidate ID</span>,
                                        <span>Name</span>,
                                        <span>Votes</span>,
                                        "",
                                    ]}
                                    noPagination
                                />
                            );
                        })
                    )
                ) : (
                    <div>Web3 Currently Not Enabled. Please Connect Wallet!</div>
                )}
                <Form
                    buttonConfig={{
                        text: "Vote",
                        theme: "primary",
                    }}
                    data={[
                        {
                            name: "Choose ID",
                            type: "number",
                            validation: {
                                numberMin: 0,
                            },
                            key: "candidateId",
                        },
                    ]}
                    onSubmit={vote}
                    title="Vote for candidate"
                />
            </div>
        </div>
    );
}
